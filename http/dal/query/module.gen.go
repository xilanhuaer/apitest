// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xilanhuaer/http-client/dal/model"
)

func newModule(db *gorm.DB, opts ...gen.DOOption) module {
	_module := module{}

	_module.moduleDo.UseDB(db, opts...)
	_module.moduleDo.UseModel(&model.Module{})

	tableName := _module.moduleDo.TableName()
	_module.ALL = field.NewAsterisk(tableName)
	_module.ID = field.NewInt32(tableName, "id")
	_module.Name = field.NewString(tableName, "name")
	_module.Description = field.NewString(tableName, "description")
	_module.SystemID = field.NewInt32(tableName, "system_id")
	_module.SystemName = field.NewString(tableName, "system_name")
	_module.Enable = field.NewBool(tableName, "enable")
	_module.CreatedAt = field.NewTime(tableName, "created_at")
	_module.UpdatedAt = field.NewTime(tableName, "updated_at")
	_module.DeletedAt = field.NewField(tableName, "deleted_at")

	_module.fillFieldMap()

	return _module
}

type module struct {
	moduleDo moduleDo

	ALL         field.Asterisk
	ID          field.Int32
	Name        field.String // 模块名称
	Description field.String // 模块描述
	SystemID    field.Int32  // 所属系统id
	SystemName  field.String // 所属系统名称
	Enable      field.Bool   // 是否启用
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (m module) Table(newTableName string) *module {
	m.moduleDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m module) As(alias string) *module {
	m.moduleDo.DO = *(m.moduleDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *module) updateTableName(table string) *module {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")
	m.Description = field.NewString(table, "description")
	m.SystemID = field.NewInt32(table, "system_id")
	m.SystemName = field.NewString(table, "system_name")
	m.Enable = field.NewBool(table, "enable")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *module) WithContext(ctx context.Context) IModuleDo { return m.moduleDo.WithContext(ctx) }

func (m module) TableName() string { return m.moduleDo.TableName() }

func (m module) Alias() string { return m.moduleDo.Alias() }

func (m module) Columns(cols ...field.Expr) gen.Columns { return m.moduleDo.Columns(cols...) }

func (m *module) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *module) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["description"] = m.Description
	m.fieldMap["system_id"] = m.SystemID
	m.fieldMap["system_name"] = m.SystemName
	m.fieldMap["enable"] = m.Enable
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m module) clone(db *gorm.DB) module {
	m.moduleDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m module) replaceDB(db *gorm.DB) module {
	m.moduleDo.ReplaceDB(db)
	return m
}

type moduleDo struct{ gen.DO }

type IModuleDo interface {
	gen.SubQuery
	Debug() IModuleDo
	WithContext(ctx context.Context) IModuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IModuleDo
	WriteDB() IModuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IModuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IModuleDo
	Not(conds ...gen.Condition) IModuleDo
	Or(conds ...gen.Condition) IModuleDo
	Select(conds ...field.Expr) IModuleDo
	Where(conds ...gen.Condition) IModuleDo
	Order(conds ...field.Expr) IModuleDo
	Distinct(cols ...field.Expr) IModuleDo
	Omit(cols ...field.Expr) IModuleDo
	Join(table schema.Tabler, on ...field.Expr) IModuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IModuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IModuleDo
	Group(cols ...field.Expr) IModuleDo
	Having(conds ...gen.Condition) IModuleDo
	Limit(limit int) IModuleDo
	Offset(offset int) IModuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IModuleDo
	Unscoped() IModuleDo
	Create(values ...*model.Module) error
	CreateInBatches(values []*model.Module, batchSize int) error
	Save(values ...*model.Module) error
	First() (*model.Module, error)
	Take() (*model.Module, error)
	Last() (*model.Module, error)
	Find() ([]*model.Module, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Module, err error)
	FindInBatches(result *[]*model.Module, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Module) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IModuleDo
	Assign(attrs ...field.AssignExpr) IModuleDo
	Joins(fields ...field.RelationField) IModuleDo
	Preload(fields ...field.RelationField) IModuleDo
	FirstOrInit() (*model.Module, error)
	FirstOrCreate() (*model.Module, error)
	FindByPage(offset int, limit int) (result []*model.Module, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IModuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m moduleDo) Debug() IModuleDo {
	return m.withDO(m.DO.Debug())
}

func (m moduleDo) WithContext(ctx context.Context) IModuleDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moduleDo) ReadDB() IModuleDo {
	return m.Clauses(dbresolver.Read)
}

func (m moduleDo) WriteDB() IModuleDo {
	return m.Clauses(dbresolver.Write)
}

func (m moduleDo) Session(config *gorm.Session) IModuleDo {
	return m.withDO(m.DO.Session(config))
}

func (m moduleDo) Clauses(conds ...clause.Expression) IModuleDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moduleDo) Returning(value interface{}, columns ...string) IModuleDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moduleDo) Not(conds ...gen.Condition) IModuleDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moduleDo) Or(conds ...gen.Condition) IModuleDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moduleDo) Select(conds ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moduleDo) Where(conds ...gen.Condition) IModuleDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moduleDo) Order(conds ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moduleDo) Distinct(cols ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moduleDo) Omit(cols ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moduleDo) Join(table schema.Tabler, on ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IModuleDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moduleDo) RightJoin(table schema.Tabler, on ...field.Expr) IModuleDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moduleDo) Group(cols ...field.Expr) IModuleDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moduleDo) Having(conds ...gen.Condition) IModuleDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moduleDo) Limit(limit int) IModuleDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moduleDo) Offset(offset int) IModuleDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IModuleDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moduleDo) Unscoped() IModuleDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moduleDo) Create(values ...*model.Module) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moduleDo) CreateInBatches(values []*model.Module, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moduleDo) Save(values ...*model.Module) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moduleDo) First() (*model.Module, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Module), nil
	}
}

func (m moduleDo) Take() (*model.Module, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Module), nil
	}
}

func (m moduleDo) Last() (*model.Module, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Module), nil
	}
}

func (m moduleDo) Find() ([]*model.Module, error) {
	result, err := m.DO.Find()
	return result.([]*model.Module), err
}

func (m moduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Module, err error) {
	buf := make([]*model.Module, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moduleDo) FindInBatches(result *[]*model.Module, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moduleDo) Attrs(attrs ...field.AssignExpr) IModuleDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moduleDo) Assign(attrs ...field.AssignExpr) IModuleDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moduleDo) Joins(fields ...field.RelationField) IModuleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moduleDo) Preload(fields ...field.RelationField) IModuleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moduleDo) FirstOrInit() (*model.Module, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Module), nil
	}
}

func (m moduleDo) FirstOrCreate() (*model.Module, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Module), nil
	}
}

func (m moduleDo) FindByPage(offset int, limit int) (result []*model.Module, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moduleDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moduleDo) Delete(models ...*model.Module) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moduleDo) withDO(do gen.Dao) *moduleDo {
	m.DO = *do.(*gen.DO)
	return m
}
